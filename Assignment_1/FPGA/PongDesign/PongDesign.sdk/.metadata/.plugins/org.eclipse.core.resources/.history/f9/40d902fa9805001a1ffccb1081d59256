
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "WS2812.h"
#include "xparameters.h"
#include "xil_io.h"
#include "sleep.h"
#include "math.h"
#include <stdint.h>
//#include "typedef.h"
//#include "xgpio.h"

#define WS2812ADR XPAR_WS2812_0_S00_AXI_BASEADDR

u16 result;

typedef uint8_t byte;

byte GameArray[64];

void drawPixel(int X, int Y);

typedef union
{
    UINT32 data : 24;
    UINT8 v[3] __PACKED; //v[0] is lowest, v[1] is middle and v[2] is highest byte
    struct __PACKED
    {
        UINT8 LB;
        UINT8 HB;
        UINT8 UB;
    } byte;
    struct __PACKED
    {
        __EXTENSION UINT8 b0:1;
        __EXTENSION UINT8 b1:1;
        __EXTENSION UINT8 b2:1;
        __EXTENSION UINT8 b3:1;
        __EXTENSION UINT8 b4:1;
        __EXTENSION UINT8 b5:1;
        __EXTENSION UINT8 b6:1;
        __EXTENSION UINT8 b7:1;
        __EXTENSION UINT8 b8:1;
        __EXTENSION UINT8 b9:1;
        __EXTENSION UINT8 b10:1;
        __EXTENSION UINT8 b11:1;
        __EXTENSION UINT8 b12:1;
        __EXTENSION UINT8 b13:1;
        __EXTENSION UINT8 b14:1;
        __EXTENSION UINT8 b15:1;
        __EXTENSION UINT8 b16:1;
        __EXTENSION UINT8 b17:1;
        __EXTENSION UINT8 b18:1;
        __EXTENSION UINT8 b19:1;
        __EXTENSION UINT8 b20:1;
        __EXTENSION UINT8 b21:1;
        __EXTENSION UINT8 b22:1;
        __EXTENSION UINT8 b23:1;

    } bits;
} UINT24_VAL;

int main()
{
    init_platform();
    int readreg, Status;
    int itel;
    int color = 0x0f0000 ;
    printf("Starting Pong.\n\r");

    //WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET, 0xFFFFFF);
    //WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG64_OFFSET, 0xFF);
    //WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG64_OFFSET, 0x00);
    //XGpio_DiscreteWrite(&Gpio, GPIO_CHANNEL, 0x00);
   // WS2812_mWriteReg(WS2812ADR, 0, 1500000);

	for(;;){
    //WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET, 0xFFFFFF);
		//readreg= WS2812_mReadReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET);
		//printf("Readreg0: %d\n\r", readreg);
		//itel++;
		//XGpio_DiscreteWrite(&Gpio, GPIO_CHANNEL, 0x01);
		//XGpio_DiscreteWrite(&Gpio, GPIO_CHANNEL, 0x00);
		//WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET, 0xffffff);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET, color);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG7_OFFSET, color);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG8_OFFSET, color);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG12_OFFSET, color);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG16_OFFSET, color);
		sleep(2);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET, 0x000000);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG7_OFFSET, 0x000000);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG8_OFFSET, 0x000000);
		/*
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG15_OFFSET, color);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG16_OFFSET, color);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG23_OFFSET, color);
		sleep(2);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG24_OFFSET, 0xFFFFFF);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG2_OFFSET, 0xFFFFFF);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG63_OFFSET, 0xFFFFFF);
		sleep(2);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET, 0x000000);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG2_OFFSET, 0x000000);
		WS2812_mWriteReg(WS2812ADR,WS2812_S00_AXI_SLV_REG63_OFFSET, 0x000000);
		sleep(2);
		readreg = WS2812_mReadReg(WS2812ADR,WS2812_S00_AXI_SLV_REG0_OFFSET);
		printf("Readreg0: %d\n\r", readreg);
		*/
	}

    cleanup_platform();
    return 0;
}

void drawPixel(int X, int Y){
	uint arraypos=0;

	arraypos = (1-X)*9;


}
