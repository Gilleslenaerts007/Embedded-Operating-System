
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "WS2812.h"
#include "xparameters.h"
#include "xil_io.h"
#include "sleep.h"
#include "math.h"
#include <stdint.h>
//#include "typedef.h"
//#include "xgpio.h"

#define WS2812ADR XPAR_WS2812_0_S00_AXI_BASEADDR
#define COLOUR_INTENSITY 10

u16 result;

struct uint24_t { unsigned long v:24; };
typedef struct uint24_t __attribute__((packed)) uint24_t;

struct pixelColour
{
	uint8_t green, red, blue;
};

//--globals--
int GameArray[64];
struct pixelColour colourArray[8][8];

int BalkHit, LokatieBalkL, LokatieBalkR, BallX, BallY, BalkLinks, BalkRechts, BallMoveX, BallMoveY;

void drawPixel(int X, int Y);
void drawLine(int x1, int y1, int x2, int y2);
void initPongLevel();
void drawGame();

int main()
{
    init_platform();
    printf("Starting Pong.\n\r");
    initPongLevel();
    drawGame();
	for(;;)
	{
		//colourArray[0][0].blue = 100;
		//drawGame();

	}

    cleanup_platform();
    return 0;
}

void update()
{

}

//draws one pixel in screenbuf
void drawPixel(int X, int Y)
{

	colourArray[Y][X].red = COLOUR_INTENSITY;
}

void initPongLevel(){

    LokatieBalkL = 1;
    LokatieBalkR = 8;
    BalkRechts,BalkLinks = 4;
    BallX,BallY=4;
	//color=GROEN
	drawLine(0, 3, 0, 5);
	//color=BLUE
	drawLine(7, 3, 7, 5);
	//Color=RED
	drawPixel(4,4);
}

//draws to screen buffer
void drawGame()
{
	for(int y = 0; y <= 8; ++y)
	{
		for(int x = 0; x <= 8; ++x)
		{
			int data = (colourArray[y][x].green << 16) + (colourArray[y][x].red << 8) + colourArray[y][x].blue;
			WS2812_mWriteReg(WS2812ADR,((x*4)+(y*32)), data);
		}
	}
}

void drawLine (int x1, int y1, int x2, int y2) {      //draw a line from x1,y1 to x2,y2
	void hitdetect()
	{
	  if(	BallMovex == 1 && BallX == ((LokatieBalkR-1))  )
		{
			if (BallY == BalkRechts || BallY == BalkRechts+1)
			{
			BallMovex = BallMovex * -1;
			BallMovey = -1;
	            BalkHit++;
			}
			else if (BallY == BalkRechts+2 || BallY == BalkRechts+3)
			{
			BallMovex = BallMovex * -1;
			BallMovey = 0;
	            BalkHit++;
			}
			else if (BallY == BalkRechts+4 || BallY == BalkRechts+5)
			{
			BallMovex = BallMovex * -1;
			BallMovey = 1;
	             BalkHit++;
			}

		}
		else if ( BallMovex == -1 && BallX == (LokatieBalkL+1))
		{
			if (BallY == BalkLinks || BallY == BalkLinks+1)
			{
			BallMovex = BallMovex * -1;
			BallMovey = -1;
	             BalkHit++;
			}
			else if (BallY == BalkLinks+2 || BallY == BalkLinks+3)
			{
			BallMovex = BallMovex * -1;
			BallMovey = 0;
	             BalkHit++;
			}
			else if (BallY == BalkLinks+4 || BallY == BalkLinks+5)
			{
			BallMovex = BallMovex * -1;
			BallMovey = 1;
	             BalkHit++;}
		}

	    if (BallY == ((bigY-2)*8) || BallY == 1)
	    {
	        BallMovey = BallMovey * -1;
	    }

	    /*-------Score updates---------*/
	 else if (BallX <= LokatieBalkL)
	    {

	        if(ScoreP2[1]<'9'){
	            player2score++;
	             sprintf(&ScoreP2[1], "%d", player2score); //Zet integer rechts om in een string en plaats in array links
	        }
	        else{
	            player2score = 1;
	            sprintf(&ScoreP2[0], "%d", player2score);
	            ScoreP1[1] = '0';
	        }
	        readController(1,1);
	        LokatieBalkL = 1;
	        LokatieBalkR = 80;
	        BalkHit = 0;
	        BallX = rand()%40+25;
	        BallY = rand()%24;
	        BallMovex = BallMovex*-1;
	        ronde++;
	        CyDelay(500);

	        DrawScoreBoard();
	        //DrawGame(BallX, BallY);

	    }

	  else if (BallX >=LokatieBalkR)
	    {
	        if(ScoreP1[1]<'9'){
	          player1score++;
	          sprintf(&ScoreP1[1], "%d", player1score); //Zet integer rechts om in een string en plaats in array links
	        }
	        else{
	            player1score = 1;
	            sprintf(&ScoreP1[0], "%d", player1score);
	            ScoreP1[1] = '0';
	        }
	        readController(2,1);
	        LokatieBalkL = 1;
	        LokatieBalkR = 80;
	        BalkHit = 0;
	        BallX = rand()%40+21;
	        BallY = rand()%24;
	        BallMovex = BallMovex*-1;
	        ronde++;
	        CyDelay(500);

	        DrawScoreBoard();
	        //DrawGame(BallX, BallY);
	    }

	}
int dx, dy, sx, sy, err, e2;

dx = abs (x2-x1);
dy = abs (y2-y1);
if (x1<x2) sx = 1;
   else sx = -1;
if (y1<y2) sy = 1;
   else sy = -1;
err = dx-dy;
do {
   drawPixel (x1, y1);
   if ((x1 == x2) && (y1 == y2))
      break;
   e2 = 2*err;
   if (e2 > -dy) {
      err = err - dy;
		 x1 = x1+sx;
   }
   if (e2 < dx) {
      err = err + dx;
		 y1 = y1 + sy;
   }
} while (1);
	return;
}
